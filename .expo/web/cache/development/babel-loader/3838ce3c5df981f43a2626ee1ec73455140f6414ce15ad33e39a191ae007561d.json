{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as FileSystem from 'expo-file-system';\nimport { logger, fileAsyncTransport } from 'react-native-logs';\nvar appendToFile = function () {\n  var _ref = _asyncToGenerator(function* (filePath, data, encoding) {\n    try {\n      yield FileSystem.writeAsStringAsync(filePath, data, {\n        encoding: encoding,\n        append: true\n      });\n    } catch (error) {\n      console.error(\"Ошибка записи в файл:\", error);\n      throw error;\n    }\n  });\n  return function appendToFile(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var log = logger.createLogger({\n  transport: function () {\n    var _transport = _asyncToGenerator(function* (msg) {\n      var formattedMessage = \"[\" + msg.date.toISOString() + \"] [\" + msg.type + \"] \" + msg.message;\n      yield appendToFile('log.txt', formattedMessage, 'utf8');\n    });\n    function transport(_x4) {\n      return _transport.apply(this, arguments);\n    }\n    return transport;\n  }()\n});","map":{"version":3,"names":["FileSystem","logger","fileAsyncTransport","appendToFile","_ref","_asyncToGenerator","filePath","data","encoding","writeAsStringAsync","append","error","console","_x","_x2","_x3","apply","arguments","log","createLogger","transport","_transport","msg","formattedMessage","date","toISOString","type","message","_x4"],"sources":["C:/Users/12art/Desktop/konstruktors/EnglishApp_mobile_technology_courswork/logger.js"],"sourcesContent":["import * as FileSystem from 'expo-file-system';\r\nimport { logger, fileAsyncTransport } from 'react-native-logs';\r\n\r\nconst appendToFile = async (filePath, data, encoding) => {\r\n  try {\r\n    await FileSystem.writeAsStringAsync(filePath, data, { encoding: encoding, append: true });\r\n  } catch (error) {\r\n    console.error(\"Ошибка записи в файл:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const log = logger.createLogger({\r\n  transport: async (msg) => {\r\n    const formattedMessage = `[${msg.date.toISOString()}] [${msg.type}] ${msg.message}`;\r\n    await appendToFile('log.txt', formattedMessage, 'utf8');\r\n  },\r\n});\r\n"],"mappings":";AAAA,OAAO,KAAKA,UAAU,MAAM,kBAAkB;AAC9C,SAASC,MAAM,EAAEC,kBAAkB,QAAQ,mBAAmB;AAE9D,IAAMC,YAAY;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,QAAQ,EAAEC,IAAI,EAAEC,QAAQ,EAAK;IACvD,IAAI;MACF,MAAMR,UAAU,CAACS,kBAAkB,CAACH,QAAQ,EAAEC,IAAI,EAAE;QAAEC,QAAQ,EAAEA,QAAQ;QAAEE,MAAM,EAAE;MAAK,CAAC,CAAC;IAC3F,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAPKR,YAAYA,CAAAU,EAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAX,IAAA,CAAAY,KAAA,OAAAC,SAAA;EAAA;AAAA,GAOjB;AAED,OAAO,IAAMC,GAAG,GAAGjB,MAAM,CAACkB,YAAY,CAAC;EACrCC,SAAS;IAAA,IAAAC,UAAA,GAAAhB,iBAAA,CAAE,WAAOiB,GAAG,EAAK;MACxB,IAAMC,gBAAgB,SAAOD,GAAG,CAACE,IAAI,CAACC,WAAW,EAAE,WAAMH,GAAG,CAACI,IAAI,UAAKJ,GAAG,CAACK,OAAS;MACnF,MAAMxB,YAAY,CAAC,SAAS,EAAEoB,gBAAgB,EAAE,MAAM,CAAC;IACzD,CAAC;IAAA,SAAAH,UAAAQ,GAAA;MAAA,OAAAP,UAAA,CAAAL,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAG,SAAA;EAAA;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}