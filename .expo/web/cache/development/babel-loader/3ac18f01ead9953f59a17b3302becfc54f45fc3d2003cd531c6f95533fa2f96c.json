{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { logger, fileAsyncTransport } from 'react-native-logs';\nvar saveLogToIndexedDB = function () {\n  var _ref = _asyncToGenerator(function* (logData) {\n    try {\n      var db = yield window.indexedDB.open('MyLogsDB', 1);\n      db.onerror = function (event) {\n        console.error('IndexedDB error:', event.target.errorCode);\n      };\n      db.onsuccess = function (event) {\n        var database = event.target.result;\n        var transaction = database.transaction(['logs'], 'readwrite');\n        var objectStore = transaction.objectStore('logs');\n        var request = objectStore.add(logData);\n        request.onsuccess = function () {\n          console.log('Log added to IndexedDB:', logData);\n        };\n        request.onerror = function (error) {\n          console.error('Error adding log to IndexedDB:', error);\n        };\n      };\n    } catch (error) {\n      console.error('IndexedDB error:', error);\n    }\n  });\n  return function saveLogToIndexedDB(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var log = logger.createLogger({\n  transport: fileAsyncTransport,\n  transportOptions: {\n    callback: function callback(logEntry) {\n      console.log('Log received:', logEntry);\n      saveLogToIndexedDB(_objectSpread({\n        id: Date.now()\n      }, logEntry));\n    }\n  }\n});","map":{"version":3,"names":["logger","fileAsyncTransport","saveLogToIndexedDB","_ref","_asyncToGenerator","logData","db","window","indexedDB","open","onerror","event","console","error","target","errorCode","onsuccess","database","result","transaction","objectStore","request","add","log","_x","apply","arguments","createLogger","transport","transportOptions","callback","logEntry","_objectSpread","id","Date","now"],"sources":["C:/Users/12art/Desktop/konstruktors/EnglishApp_mobile_technology_courswork/logger.js"],"sourcesContent":["import { logger, fileAsyncTransport } from 'react-native-logs';\r\n\r\nconst saveLogToIndexedDB = async (logData) => {\r\n  try {\r\n    const db = await window.indexedDB.open('MyLogsDB', 1);\r\n\r\n    db.onerror = function (event) {\r\n      console.error('IndexedDB error:', event.target.errorCode);\r\n    };\r\n\r\n    db.onsuccess = function (event) {\r\n      const database = event.target.result;\r\n      const transaction = database.transaction(['logs'], 'readwrite');\r\n      const objectStore = transaction.objectStore('logs');\r\n\r\n      const request = objectStore.add(logData);\r\n\r\n      request.onsuccess = function () {\r\n        console.log('Log added to IndexedDB:', logData);\r\n      };\r\n\r\n      request.onerror = function (error) {\r\n        console.error('Error adding log to IndexedDB:', error);\r\n      };\r\n    };\r\n  } catch (error) {\r\n    console.error('IndexedDB error:', error);\r\n  }\r\n};\r\n\r\n\r\nexport const log = logger.createLogger({\r\n  transport: fileAsyncTransport,\r\n  transportOptions: {\r\n    callback: (logEntry) => {\r\n      console.log('Log received:', logEntry); // Проверка лога в консоли\r\n      saveLogToIndexedDB({ id: Date.now(), ...logEntry });\r\n    },\r\n  },\r\n});"],"mappings":";;;;AAAA,SAASA,MAAM,EAAEC,kBAAkB,QAAQ,mBAAmB;AAE9D,IAAMC,kBAAkB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,OAAO,EAAK;IAC5C,IAAI;MACF,IAAMC,EAAE,SAASC,MAAM,CAACC,SAAS,CAACC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;MAErDH,EAAE,CAACI,OAAO,GAAG,UAAUC,KAAK,EAAE;QAC5BC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEF,KAAK,CAACG,MAAM,CAACC,SAAS,CAAC;MAC3D,CAAC;MAEDT,EAAE,CAACU,SAAS,GAAG,UAAUL,KAAK,EAAE;QAC9B,IAAMM,QAAQ,GAAGN,KAAK,CAACG,MAAM,CAACI,MAAM;QACpC,IAAMC,WAAW,GAAGF,QAAQ,CAACE,WAAW,CAAC,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC;QAC/D,IAAMC,WAAW,GAAGD,WAAW,CAACC,WAAW,CAAC,MAAM,CAAC;QAEnD,IAAMC,OAAO,GAAGD,WAAW,CAACE,GAAG,CAACjB,OAAO,CAAC;QAExCgB,OAAO,CAACL,SAAS,GAAG,YAAY;UAC9BJ,OAAO,CAACW,GAAG,CAAC,yBAAyB,EAAElB,OAAO,CAAC;QACjD,CAAC;QAEDgB,OAAO,CAACX,OAAO,GAAG,UAAUG,KAAK,EAAE;UACjCD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACxD,CAAC;MACH,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C;EACF,CAAC;EAAA,gBA1BKX,kBAAkBA,CAAAsB,EAAA;IAAA,OAAArB,IAAA,CAAAsB,KAAA,OAAAC,SAAA;EAAA;AAAA,GA0BvB;AAGD,OAAO,IAAMH,GAAG,GAAGvB,MAAM,CAAC2B,YAAY,CAAC;EACrCC,SAAS,EAAE3B,kBAAkB;EAC7B4B,gBAAgB,EAAE;IAChBC,QAAQ,EAAE,SAAAA,SAACC,QAAQ,EAAK;MACtBnB,OAAO,CAACW,GAAG,CAAC,eAAe,EAAEQ,QAAQ,CAAC;MACtC7B,kBAAkB,CAAA8B,aAAA;QAAGC,EAAE,EAAEC,IAAI,CAACC,GAAG;MAAE,GAAKJ,QAAQ,EAAG;IACrD;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}