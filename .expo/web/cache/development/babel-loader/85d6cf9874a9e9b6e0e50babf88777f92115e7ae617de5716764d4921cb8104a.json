{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { logger, fileAsyncTransport } from \"react-native-logs\";\nimport RNFS from \"react\";\nvar fileSystem = {\n  appendFile: function () {\n    var _appendFile = _asyncToGenerator(function* (filePath, data, encoding) {\n      try {\n        yield RNFS.appendFile(filePath, data, encoding);\n      } catch (error) {\n        console.error(\"Ошибка записи в файл:\", error);\n        throw error;\n      }\n    });\n    function appendFile(_x, _x2, _x3) {\n      return _appendFile.apply(this, arguments);\n    }\n    return appendFile;\n  }()\n};\nexport var log = logger.createLogger({\n  transport: fileAsyncTransport,\n  transportOptions: {\n    fileSystem: fileSystem,\n    fileName: 'log.txt',\n    fileSize: 512 * 1024,\n    formatter: function formatter(msg) {\n      return \"[\" + msg.date.toISOString() + \"] [\" + msg.type + \"] \" + msg.message;\n    }\n  }\n});","map":{"version":3,"names":["logger","fileAsyncTransport","RNFS","fileSystem","appendFile","_appendFile","_asyncToGenerator","filePath","data","encoding","error","console","_x","_x2","_x3","apply","arguments","log","createLogger","transport","transportOptions","fileName","fileSize","formatter","msg","date","toISOString","type","message"],"sources":["C:/Users/12art/Desktop/konstruktors/EnglishApp_mobile_technology_courswork/logger.js"],"sourcesContent":["import { logger, fileAsyncTransport } from \"react-native-logs\";\r\nimport RNFS from \"react\";\r\n\r\n\r\nconst fileSystem = {\r\n    appendFile: async (filePath, data, encoding) => {\r\n      try {\r\n        await RNFS.appendFile(filePath, data, encoding);\r\n      } catch (error) {\r\n        console.error(\"Ошибка записи в файл:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n  };\r\n  \r\n  export const log = logger.createLogger({\r\n    transport: fileAsyncTransport,\r\n    transportOptions: {\r\n      fileSystem: fileSystem,\r\n      fileName: 'log.txt',\r\n      fileSize: 512 * 1024, // Опционально: указываем максимальный размер файла\r\n      formatter: (msg) => `[${msg.date.toISOString()}] [${msg.type}] ${msg.message}`, // Опционально: форматирование логов\r\n    },\r\n  });\r\n\r\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,kBAAkB,QAAQ,mBAAmB;AAC9D,OAAOC,IAAI,MAAM,OAAO;AAGxB,IAAMC,UAAU,GAAG;EACfC,UAAU;IAAA,IAAAC,WAAA,GAAAC,iBAAA,CAAE,WAAOC,QAAQ,EAAEC,IAAI,EAAEC,QAAQ,EAAK;MAC9C,IAAI;QACF,MAAMP,IAAI,CAACE,UAAU,CAACG,QAAQ,EAAEC,IAAI,EAAEC,QAAQ,CAAC;MACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,MAAMA,KAAK;MACb;IACF,CAAC;IAAA,SAAAN,WAAAQ,EAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAT,WAAA,CAAAU,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAZ,UAAA;EAAA;AACH,CAAC;AAED,OAAO,IAAMa,GAAG,GAAGjB,MAAM,CAACkB,YAAY,CAAC;EACrCC,SAAS,EAAElB,kBAAkB;EAC7BmB,gBAAgB,EAAE;IAChBjB,UAAU,EAAEA,UAAU;IACtBkB,QAAQ,EAAE,SAAS;IACnBC,QAAQ,EAAE,GAAG,GAAG,IAAI;IACpBC,SAAS,EAAE,SAAAA,UAACC,GAAG;MAAA,aAASA,GAAG,CAACC,IAAI,CAACC,WAAW,EAAE,WAAMF,GAAG,CAACG,IAAI,UAAKH,GAAG,CAACI,OAAO;IAAA;EAC9E;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}