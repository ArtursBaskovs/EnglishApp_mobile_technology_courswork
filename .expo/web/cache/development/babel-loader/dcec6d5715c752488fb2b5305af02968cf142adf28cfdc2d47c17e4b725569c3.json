{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport db from \"../db/firestore\";\nimport { useRoute } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TaskComponent = function TaskComponent(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    documents = _useState2[0],\n    setDocuments = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    inputValue = _useState4[0],\n    setInputValue = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    update = _useState6[0],\n    setUpdate = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    usedIndexes = _useState8[0],\n    setUsedIndexes = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    score = _useState10[0],\n    setScore = _useState10[1];\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    wrongCount = _useState12[0],\n    setWrongCount = _useState12[1];\n  var _useState13 = useState(''),\n    _useState14 = _slicedToArray(_useState13, 2),\n    word = _useState14[0],\n    setWord = _useState14[1];\n  var _useState15 = useState(''),\n    _useState16 = _slicedToArray(_useState15, 2),\n    rightAnswer = _useState16[0],\n    setRightAnswer = _useState16[1];\n  var randomIndex = 0;\n  var _useState17 = useState(''),\n    _useState18 = _slicedToArray(_useState17, 2),\n    taskType = _useState18[0],\n    setTaskType = _useState18[1];\n  var routePassedData = useRoute();\n  var collectionFromDB = '';\n  useEffect(function () {\n    var _routePassedData$para;\n    var whichTask = (_routePassedData$para = routePassedData.params) == null ? void 0 : _routePassedData$para.taskT;\n    if (whichTask == 'words') {\n      collectionFromDB = 'englishApp_tasks';\n    }\n    if (whichTask == 'riddles') {\n      collectionFromDB = 'englishApp_riddles';\n    }\n    console.log(collectionFromDB);\n    var dataCollection = db.collection(collectionFromDB);\n    var collectInJSON = dataCollection.onSnapshot(function (querySnapshot) {\n      var docsFromFirebase = [];\n      var index = 0;\n      querySnapshot.forEach(function (doc) {\n        docsFromFirebase[index] = doc.data();\n        index++;\n      });\n      console.log(docsFromFirebase);\n      setDocuments(docsFromFirebase);\n    });\n    console.log('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');\n    return function () {\n      collectInJSON();\n    };\n  }, []);\n  var endThis = false;\n  var _useState19 = useState(false),\n    _useState20 = _slicedToArray(_useState19, 2),\n    end = _useState20[0],\n    setEnd = _useState20[1];\n  var docLength = 0;\n  if (documents != null) {\n    docLength = Object.keys(documents).length;\n  }\n  useEffect(function () {\n    if (documents != null) {\n      randomIndex = Math.floor(Math.random() * documents.length);\n      var i = 0;\n      while (true) {\n        if (!usedIndexes.includes(randomIndex)) {\n          break;\n        }\n        randomIndex = Math.floor(Math.random() * documents.length);\n        if (documents.length < i) {\n          return function () {\n            console.log(\"Run out of tasks\");\n          };\n        }\n        i++;\n      }\n      console.log(documents[randomIndex]);\n      setWord(documents[randomIndex].eng);\n      setRightAnswer(documents[randomIndex].lv);\n      addUsedIndex(randomIndex);\n    }\n    return function () {\n      setWord('n');\n      console.log(\"values given\");\n    };\n  }, [documents, update]);\n  if (word == 'n') {\n    console.log('kaput');\n    navigation.navigate('Results', {\n      Score: score,\n      WrongCount: wrongCount,\n      totalPossible: docLength\n    });\n  }\n  var handleInputChange = function handleInputChange(text) {\n    setInputValue(text);\n  };\n  useEffect(function () {\n    console.log(\"SCORE: \" + score);\n    console.log(\"WRONGCOUNT: \" + wrongCount);\n    if (wrongCount == 5) {\n      navigation.navigate('Results', {\n        Score: score,\n        WrongCount: wrongCount,\n        totalPossible: docLength\n      });\n    }\n  }, [score, wrongCount]);\n  var handleSubmit = function handleSubmit() {\n    if (inputValue == rightAnswer) {\n      setUpdate(!update);\n      setInputValue('');\n      setScore(score + 1);\n    }\n    if (inputValue != '' && inputValue != null && inputValue != rightAnswer) {\n      setInputValue('');\n      setWrongCount(wrongCount + 1);\n    }\n  };\n  var addUsedIndex = function addUsedIndex(index) {\n    setUsedIndexes([].concat(_toConsumableArray(usedIndexes), [index]));\n    console.log(\"index added\");\n  };\n  var styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      backgroundColor: '#f8ebff'\n    },\n    header: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      textAlign: 'center',\n      color: '#494453',\n      marginTop: 150,\n      marginBottom: 100\n    },\n    inputField: {\n      borderWidth: 1,\n      borderColor: 'gray',\n      padding: 10,\n      borderRadius: 5,\n      marginTop: 20,\n      width: '100%'\n    },\n    buttonContainer: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      width: '60%'\n    }\n  });\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.header,\n      children: word && word\n    }), _jsx(TextInput, {\n      style: styles.inputField,\n      placeholder: \"Enter your input here\",\n      onChangeText: handleInputChange,\n      value: inputValue\n    }), _jsx(Button, {\n      title: \"Submit\",\n      onPress: handleSubmit\n    })]\n  });\n};\nexport default TaskComponent;","map":{"version":3,"names":["React","useEffect","useState","View","TextInput","Button","Text","StyleSheet","db","useRoute","jsx","_jsx","jsxs","_jsxs","TaskComponent","_ref","navigation","_useState","_useState2","_slicedToArray","documents","setDocuments","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","update","setUpdate","_useState7","_useState8","usedIndexes","setUsedIndexes","_useState9","_useState10","score","setScore","_useState11","_useState12","wrongCount","setWrongCount","_useState13","_useState14","word","setWord","_useState15","_useState16","rightAnswer","setRightAnswer","randomIndex","_useState17","_useState18","taskType","setTaskType","routePassedData","collectionFromDB","_routePassedData$para","whichTask","params","taskT","console","log","dataCollection","collection","collectInJSON","onSnapshot","querySnapshot","docsFromFirebase","index","forEach","doc","data","endThis","_useState19","_useState20","end","setEnd","docLength","Object","keys","length","Math","floor","random","i","includes","eng","lv","addUsedIndex","navigate","Score","WrongCount","totalPossible","handleInputChange","text","handleSubmit","concat","_toConsumableArray","styles","create","container","flex","alignItems","backgroundColor","header","fontSize","fontWeight","textAlign","color","marginTop","marginBottom","inputField","borderWidth","borderColor","padding","borderRadius","width","buttonContainer","flexDirection","justifyContent","style","children","placeholder","onChangeText","value","title","onPress"],"sources":["C:/Users/12art/Desktop/myEnglishApp/myEnglishApp/component/TaskComponent.tsx"],"sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from 'react';\r\nimport { View, TextInput, Button, Text, StyleSheet } from 'react-native';\r\nimport db from '../db/firestore';\r\nimport Tasks from './Tasks';\r\nimport { useRoute } from '@react-navigation/native';\r\n//import { useNavigation } from '@react-navigation/native';\r\n\r\n\r\n\r\nconst TaskComponent = ({navigation}) => {\r\n \r\n\r\n\r\n\r\n    //const navigation = useNavigation();\r\n\r\n    const [documents, setDocuments] = useState(null);\r\n\r\n    const [inputValue, setInputValue] = useState(null);\r\n\r\n    const [update, setUpdate] = useState(false);\r\n\r\n    const [usedIndexes, setUsedIndexes] = useState([]);\r\n\r\n    const [score, setScore] = useState(0);\r\n    const [wrongCount, setWrongCount] = useState(0);\r\n    const [word, setWord] = useState('');\r\n    //let rightAnswer = '';\r\n    const [rightAnswer, setRightAnswer] = useState('');\r\n    let randomIndex = 0;\r\n    const [taskType, setTaskType] = useState('');\r\n    //let taskType = '';\r\n    const routePassedData = useRoute();\r\n\r\n    let collectionFromDB = '';\r\n    useEffect( ()=>{\r\n      let whichTask = routePassedData.params?.taskT;\r\n      if(whichTask == 'words') {\r\n        collectionFromDB = 'englishApp_tasks';\r\n      }\r\n      if(whichTask == 'riddles'){\r\n        collectionFromDB = 'englishApp_riddles';\r\n      }\r\n      console.log(collectionFromDB);\r\n      const dataCollection = db.collection(collectionFromDB)\r\n      \r\n\r\n\r\n        const collectInJSON = dataCollection.onSnapshot((querySnapshot) => {\r\n          const docsFromFirebase = [];\r\n          let index = 0\r\n          querySnapshot.forEach((doc) => {\r\n            docsFromFirebase[index] = doc.data();\r\n            index++;\r\n          });\r\n          console.log(docsFromFirebase)\r\n          setDocuments(docsFromFirebase);\r\n        });\r\n\r\n\r\n\r\n        console.log('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')\r\n        return () => {\r\n          collectInJSON();\r\n        };\r\n    }, [])\r\n    \r\n  //\r\n  let endThis = false;\r\n  const [end, setEnd] = useState(false);\r\n  let docLength = 0;\r\n  if(documents != null){\r\n    docLength = Object.keys(documents).length;\r\n  } \r\n  useEffect(() => {\r\n    if(documents != null) {\r\n\r\n      randomIndex = Math.floor(Math.random() * documents.length);\r\n      let i = 0;\r\n      \r\n      while (true){\r\n      //console.log(i);\r\n        if(!usedIndexes.includes(randomIndex)){\r\n          break;\r\n        }\r\n        \r\n        randomIndex = Math.floor(Math.random() * documents.length);\r\n        if(documents.length < i){\r\n          //console.log(documents.length + 'Loooooool' + i);\r\n          return () => {\r\n            console.log(\"Run out of tasks\");\r\n\r\n  \r\n          }\r\n          //break;\r\n        }\r\n\r\n        i++;\r\n      }\r\n\r\n      \r\n      \r\n      console.log(documents[randomIndex])\r\n      setWord(documents[randomIndex].eng);\r\n      setRightAnswer(documents[randomIndex].lv);\r\n      //setTaskType(documents[randomIndex].taskType);\r\n      addUsedIndex(randomIndex);\r\n      \r\n    }\r\n    \r\n    return () => {\r\n      setWord('n');\r\n      console.log(\"values given\")\r\n    }\r\n  }, [documents, update])\r\n  \r\n\r\n  //when there are no tasks left, do the thing\r\n  if(word == 'n'){\r\n    console.log('kaput');\r\n    navigation.navigate('Results', { Score: score, WrongCount: wrongCount, totalPossible: docLength});     \r\n    \r\n  }\r\n\r\n    \r\n  \r\n\r\n  const handleInputChange = (text) => {\r\n    setInputValue(text);\r\n  }\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n  \r\n  \r\n  useEffect(() => {\r\n    console.log(\"SCORE: \" + score);\r\n    console.log(\"WRONGCOUNT: \" + wrongCount);\r\n\r\n    if(wrongCount == 5) {\r\n      navigation.navigate('Results', { Score: score, WrongCount: wrongCount, totalPossible: docLength});\r\n    }\r\n  }, [score, wrongCount]);\r\n\r\n  const handleSubmit = () => {\r\n   if(inputValue == rightAnswer){\r\n    \r\n    \r\n    setUpdate(!update);\r\n    setInputValue('');\r\n    setScore(score + 1);\r\n    \r\n   }\r\n   if(inputValue != '' && inputValue != null && inputValue != rightAnswer) {\r\n    setInputValue('');\r\n    setWrongCount(wrongCount + 1);\r\n   }\r\n  }\r\n  //I populate array of used indexes to check if given task was used during one session\r\n  const addUsedIndex = (index) => {\r\n    setUsedIndexes([...usedIndexes, index]);\r\n    console.log(\"index added\");\r\n  }\r\n\r\n\r\n  //usedIndexes && console.log(usedIndexes);\r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      alignItems: 'center',\r\n      \r\n      backgroundColor: '#f8ebff',\r\n    },\r\n    header: {\r\n      fontSize: 24,\r\n      fontWeight: 'bold',\r\n      textAlign: 'center',\r\n      color: '#494453',\r\n      marginTop: 150,\r\n      marginBottom: 100,\r\n    },\r\n    inputField:{\r\n      borderWidth: 1,\r\n      borderColor: 'gray',\r\n      padding: 10,\r\n      borderRadius: 5,\r\n      marginTop: 20,\r\n      width: '100%'\r\n    },\r\n    buttonContainer: {\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n      width: '60%',\r\n    }\r\n    \r\n  });\r\n\r\n  return (\r\n    \r\n    <View style={styles.container}>\r\n        \r\n      <Text style={styles.header}>{word && word}</Text>\r\n      <TextInput\r\n        style={styles.inputField}\r\n        placeholder=\"Enter your input here\"\r\n        onChangeText={handleInputChange}\r\n        value={inputValue}\r\n      />\r\n      <Button\r\n        title=\"Submit\"\r\n        onPress={handleSubmit}\r\n      />\r\n     \r\n    </View>\r\n    \r\n  );\r\n};\r\n\r\nexport default TaskComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}